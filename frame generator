import React, { useState, useRef } from 'react';
import { Download, Circle, Square } from 'lucide-react';

const LaserCutGenerator = () => {
  const [frameType, setFrameType] = useState('circle');
  const [numNotches, setNumNotches] = useState(200);
  const [frameSize, setFrameSize] = useState(300);
  const [notchDepth, setNotchDepth] = useState(4);
  const [frameThickness, setFrameThickness] = useState(20);
  const svgRef = useRef(null);

  const generateCircularFrame = () => {
    const radius = frameSize / 2;
    const innerRadius = radius - frameThickness;
    const notches = [];
    
    for (let i = 0; i < numNotches; i++) {
      const angle = (i / numNotches) * Math.PI * 2 - Math.PI / 2;
      const x = radius + radius * Math.cos(angle);
      const y = radius + radius * Math.sin(angle);
      
      const notchAngle = angle;
      const notchLength = notchDepth;
      const notchWidth = 2;
      
      const x1 = radius + (radius + notchLength) * Math.cos(notchAngle);
      const y1 = radius + (radius + notchLength) * Math.sin(notchAngle);
      const x2 = radius + (radius + notchLength) * Math.cos(notchAngle + 0.05);
      const y2 = radius + (radius + notchLength) * Math.sin(notchAngle + 0.05);
      const x3 = radius + (radius + notchLength) * Math.cos(notchAngle - 0.05);
      const y3 = radius + (radius + notchLength) * Math.sin(notchAngle - 0.05);
      
      notches.push({
        path: `M ${x},${y} L ${x1},${y1} M ${x},${y} L ${x2},${y2} M ${x},${y} L ${x3},${y3}`,
        number: i + 1,
        labelX: radius + (radius + notchLength + 8) * Math.cos(notchAngle),
        labelY: radius + (radius + notchLength + 8) * Math.sin(notchAngle)
      });
    }
    
    return { radius, innerRadius, notches };
  };

  const generateSquareFrame = () => {
    const notches = [];
    const perSide = Math.floor(numNotches / 4);
    const spacing = frameSize / perSide;
    
    // Top edge
    for (let i = 0; i < perSide; i++) {
      const x = i * spacing;
      notches.push({
        path: `M ${x},0 L ${x - 1.5},${-notchDepth} L ${x + 1.5},${-notchDepth} Z`,
        number: i + 1,
        labelX: x,
        labelY: -notchDepth - 5
      });
    }
    
    // Right edge
    for (let i = 0; i < perSide; i++) {
      const y = i * spacing;
      notches.push({
        path: `M ${frameSize},${y} L ${frameSize + notchDepth},${y - 1.5} L ${frameSize + notchDepth},${y + 1.5} Z`,
        number: perSide + i + 1,
        labelX: frameSize + notchDepth + 5,
        labelY: y
      });
    }
    
    // Bottom edge
    for (let i = 0; i < perSide; i++) {
      const x = frameSize - i * spacing;
      notches.push({
        path: `M ${x},${frameSize} L ${x - 1.5},${frameSize + notchDepth} L ${x + 1.5},${frameSize + notchDepth} Z`,
        number: perSide * 2 + i + 1,
        labelX: x,
        labelY: frameSize + notchDepth + 8
      });
    }
    
    // Left edge
    for (let i = 0; i < perSide; i++) {
      const y = frameSize - i * spacing;
      notches.push({
        path: `M 0,${y} L ${-notchDepth},${y - 1.5} L ${-notchDepth},${y + 1.5} Z`,
        number: perSide * 3 + i + 1,
        labelX: -notchDepth - 8,
        labelY: y
      });
    }
    
    return { notches };
  };

  const generateSVG = () => {
    const padding = 40;
    const viewBoxSize = frameSize + padding * 2;
    
    if (frameType === 'circle') {
      const { radius, innerRadius, notches } = generateCircularFrame();
      const centerOffset = padding + radius;
      
      return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${viewBoxSize}mm" height="${viewBoxSize}mm" viewBox="0 0 ${viewBoxSize} ${viewBoxSize}" xmlns="http://www.w3.org/2000/svg">
  <title>String Art Circular Frame - ${numNotches} Notches - ${frameSize}mm</title>
  <desc>
    Frame Type: Circular
    Diameter: ${frameSize}mm
    Number of Notches: ${numNotches}
    Notch Depth: ${notchDepth}mm
    Frame Width: ${frameThickness}mm
    Material Thickness: 3-6mm recommended
    Red lines = CUT
    Blue lines = ENGRAVE (optional reference)
  </desc>
  
  <g transform="translate(${centerOffset}, ${centerOffset})">
    <!-- Outer circle (CUT) -->
    <circle cx="0" cy="0" r="${radius}" fill="none" stroke="red" stroke-width="0.1"/>
    
    <!-- Inner circle (ENGRAVE - optional) -->
    <circle cx="0" cy="0" r="${innerRadius}" fill="none" stroke="blue" stroke-width="0.05"/>
    
    <!-- Notches (CUT) -->
    <g id="notches">
      ${notches.map(n => `<path d="${n.path}" fill="none" stroke="red" stroke-width="0.1"/>`).join('\n      ')}
    </g>
    
    <!-- Number labels (ENGRAVE - optional, remove if not needed) -->
    <g id="numbers" fill="blue" font-size="3" text-anchor="middle" dominant-baseline="middle">
      ${notches.filter((_, i) => i % 10 === 0).map(n => 
        `<text x="${n.labelX - radius}" y="${n.labelY - radius}">${n.number}</text>`
      ).join('\n      ')}
    </g>
  </g>
</svg>`;
    } else {
      const { notches } = generateSquareFrame();
      
      return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${viewBoxSize}mm" height="${viewBoxSize}mm" viewBox="0 0 ${viewBoxSize} ${viewBoxSize}" xmlns="http://www.w3.org/2000/svg">
  <title>String Art Square Frame - ${numNotches} Notches - ${frameSize}mm</title>
  <desc>
    Frame Type: Square
    Size: ${frameSize}mm x ${frameSize}mm
    Number of Notches: ${numNotches}
    Notch Depth: ${notchDepth}mm
    Frame Width: ${frameThickness}mm
    Material Thickness: 3-6mm recommended
    Red lines = CUT
    Blue lines = ENGRAVE (optional reference)
  </desc>
  
  <g transform="translate(${padding}, ${padding})">
    <!-- Outer square (CUT) -->
    <rect x="0" y="0" width="${frameSize}" height="${frameSize}" fill="none" stroke="red" stroke-width="0.1"/>
    
    <!-- Inner square (ENGRAVE - optional) -->
    <rect x="${frameThickness}" y="${frameThickness}" width="${frameSize - frameThickness * 2}" height="${frameSize - frameThickness * 2}" fill="none" stroke="blue" stroke-width="0.05"/>
    
    <!-- Notches (CUT) -->
    <g id="notches">
      ${notches.map(n => `<path d="${n.path}" fill="none" stroke="red" stroke-width="0.1"/>`).join('\n      ')}
    </g>
    
    <!-- Number labels (ENGRAVE - optional, remove if not needed) -->
    <g id="numbers" fill="blue" font-size="3" text-anchor="middle" dominant-baseline="middle">
      ${notches.filter((_, i) => i % 10 === 0).map(n => 
        `<text x="${n.labelX}" y="${n.labelY}">${n.number}</text>`
      ).join('\n      ')}
    </g>
  </g>
</svg>`;
    }
  };

  const downloadSVG = () => {
    const svg = generateSVG();
    const blob = new Blob([svg], { type: 'image/svg+xml' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `string-art-${frameType}-${numNotches}notches-${frameSize}mm.svg`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const renderPreview = () => {
    if (frameType === 'circle') {
      const { radius, innerRadius, notches } = generateCircularFrame();
      return (
        <svg viewBox={`0 0 ${frameSize + 40} ${frameSize + 40}`} className="w-full h-full">
          <g transform={`translate(${radius + 20}, ${radius + 20})`}>
            <circle cx="0" cy="0" r={radius} fill="none" stroke="#ef4444" strokeWidth="1"/>
            <circle cx="0" cy="0" r={innerRadius} fill="none" stroke="#3b82f6" strokeWidth="0.5"/>
            {notches.map((n, i) => (
              <path key={i} d={n.path} fill="none" stroke="#ef4444" strokeWidth="0.5"/>
            ))}
            {notches.filter((_, i) => i % 10 === 0).map((n, i) => (
              <text 
                key={i} 
                x={n.labelX - radius} 
                y={n.labelY - radius} 
                textAnchor="middle" 
                dominantBaseline="middle" 
                fontSize="6" 
                fill="#3b82f6"
              >
                {n.number}
              </text>
            ))}
          </g>
        </svg>
      );
    } else {
      const { notches } = generateSquareFrame();
      return (
        <svg viewBox={`-20 -20 ${frameSize + 40} ${frameSize + 40}`} className="w-full h-full">
          <rect x="0" y="0" width={frameSize} height={frameSize} fill="none" stroke="#ef4444" strokeWidth="1"/>
          <rect 
            x={frameThickness} 
            y={frameThickness} 
            width={frameSize - frameThickness * 2} 
            height={frameSize - frameThickness * 2} 
            fill="none" 
            stroke="#3b82f6" 
            strokeWidth="0.5"
          />
          {notches.map((n, i) => (
            <path key={i} d={n.path} fill="none" stroke="#ef4444" strokeWidth="0.5"/>
          ))}
          {notches.filter((_, i) => i % 10 === 0).map((n, i) => (
            <text 
              key={i} 
              x={n.labelX} 
              y={n.labelY} 
              textAnchor="middle" 
              dominantBaseline="middle" 
              fontSize="6" 
              fill="#3b82f6"
            >
              {n.number}
            </text>
          ))}
        </svg>
      );
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4 md:p-8">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-bold text-white mb-3">
            Laser Cut Frame Generator
          </h1>
          <p className="text-purple-200 text-lg">
            Generate production-ready SVG files for laser cutting
          </p>
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          {/* Settings */}
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
            <h2 className="text-2xl font-semibold text-white mb-6">Frame Settings</h2>
            
            <div className="space-y-6">
              <div>
                <label className="block text-purple-200 mb-3 text-lg font-medium">Frame Type</label>
                <div className="flex gap-3">
                  <button
                    onClick={() => setFrameType('circle')}
                    className={`flex-1 px-6 py-4 rounded-lg font-semibold transition-all flex items-center justify-center gap-2 ${
                      frameType === 'circle'
                        ? 'bg-purple-500 text-white'
                        : 'bg-white/5 text-purple-200 hover:bg-white/10'
                    }`}
                  >
                    <Circle className="w-5 h-5" />
                    Circle
                  </button>
                  <button
                    onClick={() => setFrameType('square')}
                    className={`flex-1 px-6 py-4 rounded-lg font-semibold transition-all flex items-center justify-center gap-2 ${
                      frameType === 'square'
                        ? 'bg-purple-500 text-white'
                        : 'bg-white/5 text-purple-200 hover:bg-white/10'
                    }`}
                  >
                    <Square className="w-5 h-5" />
                    Square
                  </button>
                </div>
              </div>

              <div>
                <label className="block text-purple-200 mb-2">
                  Frame Size: {frameSize}mm ({(frameSize / 25.4).toFixed(1)}")
                </label>
                <input
                  type="range"
                  min="200"
                  max="500"
                  step="10"
                  value={frameSize}
                  onChange={(e) => setFrameSize(parseInt(e.target.value))}
                  className="w-full"
                />
                <div className="flex justify-between text-xs text-purple-300 mt-1">
                  <span>200mm (8")</span>
                  <span>500mm (20")</span>
                </div>
              </div>

              <div>
                <label className="block text-purple-200 mb-2">
                  Number of Notches: {numNotches}
                </label>
                <input
                  type="range"
                  min="100"
                  max="300"
                  step="10"
                  value={numNotches}
                  onChange={(e) => setNumNotches(parseInt(e.target.value))}
                  className="w-full"
                />
                <div className="flex justify-between text-xs text-purple-300 mt-1">
                  <span>100</span>
                  <span>300</span>
                </div>
              </div>

              <div>
                <label className="block text-purple-200 mb-2">
                  Notch Depth: {notchDepth}mm
                </label>
                <input
                  type="range"
                  min="2"
                  max="6"
                  step="0.5"
                  value={notchDepth}
                  onChange={(e) => setNotchDepth(parseFloat(e.target.value))}
                  className="w-full"
                />
                <div className="flex justify-between text-xs text-purple-300 mt-1">
                  <span>2mm</span>
                  <span>6mm</span>
                </div>
              </div>

              <div>
                <label className="block text-purple-200 mb-2">
                  Frame Width: {frameThickness}mm
                </label>
                <input
                  type="range"
                  min="15"
                  max="30"
                  step="1"
                  value={frameThickness}
                  onChange={(e) => setFrameThickness(parseInt(e.target.value))}
                  className="w-full"
                />
                <div className="flex justify-between text-xs text-purple-300 mt-1">
                  <span>15mm</span>
                  <span>30mm</span>
                </div>
              </div>

              <button
                onClick={downloadSVG}
                className="w-full px-6 py-4 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white rounded-lg font-semibold transition-all flex items-center justify-center gap-2 text-lg"
              >
                <Download className="w-5 h-5" />
                Download SVG for Laser Cutting
              </button>
            </div>
          </div>

          {/* Preview */}
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
            <h2 className="text-2xl font-semibold text-white mb-4">Preview</h2>
            <div className="bg-white rounded-lg p-4 aspect-square">
              {renderPreview()}
            </div>
            <div className="mt-4 p-4 bg-purple-500/20 rounded-lg">
              <div className="text-purple-100 text-sm space-y-1">
                <p><span className="text-red-400 font-bold">Red lines</span> = Cut paths</p>
                <p><span className="text-blue-400 font-bold">Blue lines/text</span> = Engrave (optional)</p>
                <p className="mt-3 text-xs text-purple-200">
                  Numbers shown every 10 notches for reference
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Instructions */}
        <div className="mt-6 bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
          <h3 className="text-xl font-semibold text-white mb-4">Laser Cutting Instructions</h3>
          <div className="grid md:grid-cols-2 gap-6 text-purple-100">
            <div>
              <h4 className="font-semibold text-white mb-2">Material Recommendations:</h4>
              <ul className="space-y-1 text-sm">
                <li>• 3-6mm birch plywood (best quality)</li>
                <li>• 3-5mm acrylic (modern look)</li>
                <li>• 3-6mm MDF (budget option)</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold text-white mb-2">Laser Settings:</h4>
              <ul className="space-y-1 text-sm">
                <li>• Red lines: CUT (full power)</li>
                <li>• Blue lines: ENGRAVE (low power, optional)</li>
                <li>• Test settings on scrap first</li>
              </ul>
            </div>
          </div>
          <div className="mt-4 p-4 bg-yellow-500/20 rounded-lg border border-yellow-500/30">
            <p className="text-yellow-100 text-sm">
              <strong>Note:</strong> Make sure your laser cutting service understands that notches need to be cut outward from the frame edge, not inward!
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LaserCutGenerator;